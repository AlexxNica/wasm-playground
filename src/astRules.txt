int: ( int )
float: ( float )
$str: ( $str )
string: ( string )
i32: ( i32 )
i64: ( i64 )
f32: ( f32 )
f64: ( f64 )
name: ( name )

offset: ( offset )
align: ( align )

value: <int> | <float>

var: <int> | <$str>

ntype: <i32> | <i64> | <f32> | <f64>

expr: <nop> | <block> | <loop> | <select> | <if> | <br> | <br_if> | <br_table> | <return> | <call> | <call_import> | <call_indirect> | <get_local> | <set_local> | <unreachable> | <memory_size> | <grow_memory> | <i32.const> | <i64.const> | <f32.const> | <f64.const> | <i32.load> | <i64.load> | <f32.load> | <f64.load> | <i32.load8_s> | <i32.load8_u> | <i32.load16_s> | <i32.load16_u> | <i32.load32_s> | <i32.load32_u> | <i64.load8_s> | <i64.load8_u> | <i64.load16_s> | <i64.load16_u> | <i64.load32_s> | <i64.load32_u> | <i32.store8> | <i32.store16> | <i32.store32> | <i64.store8> | <i64.store16> | <i64.store32> | <i32.store> | <i64.store> | <f32.store> | <f64.store> | <i32.clz> | <i32.ctz> | <i32.popcnt> | <i64.clz> | <i64.ctz> | <i64.popcnt> | <f32.neg> | <f32.abs> | <f32.sqrt> | <f32.ceil> | <f32.floor> | <f32.trunc> | <f32.nearest> | <f64.neg> | <f64.abs> | <f64.sqrt> | <f64.ceil> | <f64.floor> | <f64.trunc> | <f64.nearest> | <i32.add> | <i32.sub> | <i32.mul> | <i32.div_s> | <i32.div_u> | <i32.rem_s> | <i32.rem_u> | <i32.and> | <i32.or> | <i32.xor> | <i32.shl> | <i32.shr_s> | <i32.shr_u> | <i32.rotl> | <i32.rotr> | <i64.add> | <i64.sub> | <i64.mul> | <i64.div_s> | <i64.div_u> | <i64.rem_s> | <i64.rem_u> | <i64.and> | <i64.or> | <i64.xor> | <i64.shl> | <i64.shr_s> | <i64.shr_u> | <i64.rotl> | <i64.rotr> | <f32.add> | <f32.sub> | <f32.mul> | <f32.div> | <f32.min> | <f32.max> | <f32.copysign> | <f64.add> | <f64.sub> | <f64.mul> | <f64.div> | <f64.min> | <f64.max> | <f64.copysign> | <i32.eqz> | <i64.eqz> | <i32.eq> | <i32.ne> | <i32.lt_s> | <i32.lt_u> | <i32.le_s> | <i32.le_u> | <i32.gt_s> | <i32.gt_u> | <i32.ge_s> | <i32.ge_u> | <i64.eq> | <i64.ne> | <i64.lt_s> | <i64.lt_u> | <i64.le_s> | <i64.le_u> | <i64.gt_s> | <i64.gt_u> | <i64.ge_s> | <i64.ge_u> | <f32.eq> | <f32.ne> | <f32.lt> | <f32.le> | <f32.gt> | <f32.ge> | <f64.eq> | <f64.ne> | <f64.lt> | <f64.le> | <f64.gt> | <f64.ge> | <i32.wrap_i64> | <i32.trunc_s_f32> | <i32.trunc_u_f32> | <i32.trunc_s_f64> | <i32.trunc_u_f64> | <i64.extend_s_i32> | <i64.extend_u_i32> | <i64.trunc_s_f32> | <i64.trunc_u_f32> | <i64.trunc_s_f64> | <i64.trunc_u_f64> | <f32.convert_s_i32> | <f32.convert_u_i32> | <f32.convert_s_i64> | <f32.convert_u_i64> | <f32.demote_f64> | <f64.convert_s_i32> | <f64.convert_u_i32> | <f64.convert_s_i64> | <f64.convert_u_i64> | <f64.promote_f32> | <i32.reinterpret_f32> | <i64.reinterpret_f64> | <f32.reinterpret_i32> | <f64.reinterpret_i64>

nop:  ( nop )
block:  ( block <name>? <expr>* )
loop:  ( loop <name>? <name>? <expr>* )
select:  ( select <expr> <expr> <expr> )
if:  ( if <expr> <then> <else>? ) | ( if <expr> <expr> <expr>? )
then: ( then <name>? <expr>* )
else: ( else <name>? <expr>* )
br:  ( br <var> <expr>? )
br_if:  ( br_if <var> <expr>? <expr> )
br_table:  ( br_table <var> <var> <expr>? <expr> )
return:  ( return <expr>? )
call:  ( call <var> <expr>* )
call_import:  ( call_import <var> <expr>* )
call_indirect:  ( call_indirect <var> <expr> <expr>* )
get_local:  ( get_local <var> )
set_local:  ( set_local <var> <expr> )
unreachable:  ( unreachable )
memory_size:  ( memory_size )
grow_memory:  ( grow_memory <expr> )

func:   ( func <$str>? <type>? <param>* <result>? <local>* <expr>* )
param:  ( param <ntype>* ) | ( param <$str> <ntype> )
result: ( result <ntype> )
local:  ( local <ntype>* ) | ( local <$str> <ntype> )

module:  ( module <memory>? <import>* <type>* <func>* <export>* <table>* <start>? )
type:    ( type <name>? ( func <param>* <result>? ) )
import:  ( import <$str>? <string> <string> (param <ntype>* ) (result <ntype>)* )
export:  ( export <string> <var> ) | ( export <string> <memory>)
start:   ( start <var> )
table:   ( table <var>* )
memory:  ( memory <int> <int>? <segment>* )
segment: ( segment <int> <string> )

i32.const: (i32.const <value>)
i64.const: (i64.const <value>)
f32.const: (f32.const <value>)
f64.const: (f64.const <value>)

i32.load: (i32.load <offset>? <align>? <expr>)
i64.load: (i64.load <offset>? <align>? <expr>)
f32.load: (f32.load <offset>? <align>? <expr>)
f64.load: (f64.load <offset>? <align>? <expr>)
i32.load8_s: (i32.load8_s <offset>? <align>? <expr>)
i32.load8_u: (i32.load8_u <offset>? <align>? <expr>)
i32.load16_s: (i32.load16_s <offset>? <align>? <expr>)
i32.load16_u: (i32.load16_u <offset>? <align>? <expr>)
i32.load32_s: (i32.load32_s <offset>? <align>? <expr>)
i32.load32_u: (i32.load32_u <offset>? <align>? <expr>)
i64.load8_s: (i64.load8_s <offset>? <align>? <expr>)
i64.load8_u: (i64.load8_u <offset>? <align>? <expr>)
i64.load16_s: (i64.load16_s <offset>? <align>? <expr>)
i64.load16_u: (i64.load16_u <offset>? <align>? <expr>)
i64.load32_s: (i64.load32_s <offset>? <align>? <expr>)
i64.load32_u: (i64.load32_u <offset>? <align>? <expr>)
i32.store8: (i32.store8 <offset>? <align>? <expr> <expr>)
i32.store16: (i32.store16 <offset>? <align>? <expr> <expr>)
i32.store32: (i32.store32 <offset>? <align>? <expr> <expr>)
i64.store8: (i64.store8 <offset>? <align>? <expr> <expr>)
i64.store16: (i64.store16 <offset>? <align>? <expr> <expr>)
i64.store32: (i64.store32 <offset>? <align>? <expr> <expr>)
i32.store: (i32.store <offset>? <align>? <expr> <expr>)
i64.store: (i64.store <offset>? <align>? <expr> <expr>)
f32.store: (f32.store <offset>? <align>? <expr> <expr>)
f64.store: (f64.store <offset>? <align>? <expr> <expr>)

i32.clz: (i32.clz <expr>)
i32.ctz: (i32.ctz <expr>)
i32.popcnt: (i32.popcnt <expr>)
i64.clz: (i64.clz <expr>)
i64.ctz: (i64.ctz <expr>)
i64.popcnt: (i64.popcnt <expr>)
f32.neg: (f32.neg <expr>)
f32.abs: (f32.abs <expr>)
f32.sqrt: (f32.sqrt <expr>)
f32.ceil: (f32.ceil <expr>)
f32.floor: (f32.floor <expr>)
f32.trunc: (f32.trunc <expr>)
f32.nearest: (f32.nearest <expr>)
f64.neg: (f64.neg <expr>)
f64.abs: (f64.abs <expr>)
f64.sqrt: (f64.sqrt <expr>)
f64.ceil: (f64.ceil <expr>)
f64.floor: (f64.floor <expr>)
f64.trunc: (f64.trunc <expr>)
f64.nearest: (f64.nearest <expr>)

i32.add: (i32.add <expr> <expr>)
i32.sub: (i32.sub <expr> <expr>)
i32.mul: (i32.mul <expr> <expr>)
i32.div_s: (i32.div_s <expr> <expr>)
i32.div_u: (i32.div_u <expr> <expr>)
i32.rem_s: (i32.rem_s <expr> <expr>)
i32.rem_u: (i32.rem_u <expr> <expr>)
i32.and: (i32.and <expr> <expr>)
i32.or: (i32.or <expr> <expr>)
i32.xor: (i32.xor <expr> <expr>)
i32.shl: (i32.shl <expr> <expr>)
i32.shr_s: (i32.shr_s <expr> <expr>)
i32.shr_u: (i32.shr_u <expr> <expr>)
i32.rotl: (i32.rotl <expr> <expr>)
i32.rotr: (i32.rotr <expr> <expr>)
i64.add: (i64.add <expr> <expr>)
i64.sub: (i64.sub <expr> <expr>)
i64.mul: (i64.mul <expr> <expr>)
i64.div_s: (i64.div_s <expr> <expr>)
i64.div_u: (i64.div_u <expr> <expr>)
i64.rem_s: (i64.rem_s <expr> <expr>)
i64.rem_u: (i64.rem_u <expr> <expr>)
i64.and: (i64.and <expr> <expr>)
i64.or: (i64.or <expr> <expr>)
i64.xor: (i64.xor <expr> <expr>)
i64.shl: (i64.shl <expr> <expr>)
i64.shr_s: (i64.shr_s <expr> <expr>)
i64.shr_u: (i64.shr_u <expr> <expr>)
i64.rotl: (i64.rotl <expr> <expr>)
i64.rotr: (i64.rotr <expr> <expr>)
f32.add: (f32.add <expr> <expr>)
f32.sub: (f32.sub <expr> <expr>)
f32.mul: (f32.mul <expr> <expr>)
f32.div: (f32.div <expr> <expr>)
f32.min: (f32.min <expr> <expr>)
f32.max: (f32.max <expr> <expr>)
f32.copysign: (f32.copysign <expr> <expr>)
f64.add: (f64.add <expr> <expr>)
f64.sub: (f64.sub <expr> <expr>)
f64.mul: (f64.mul <expr> <expr>)
f64.div: (f64.div <expr> <expr>)
f64.min: (f64.min <expr> <expr>)
f64.max: (f64.max <expr> <expr>)
f64.copysign: (f64.copysign <expr> <expr>)

i32.eqz: (i32.eqz <expr>)
i64.eqz: (i64.eqz <expr>)

i32.eq: (i32.eq <expr> <expr>)
i32.ne: (i32.ne <expr> <expr>)
i32.lt_s: (i32.lt_s <expr> <expr>)
i32.lt_u: (i32.lt_u <expr> <expr>)
i32.le_s: (i32.le_s <expr> <expr>)
i32.le_u: (i32.le_u <expr> <expr>)
i32.gt_s: (i32.gt_s <expr> <expr>)
i32.gt_u: (i32.gt_u <expr> <expr>)
i32.ge_s: (i32.ge_s <expr> <expr>)
i32.ge_u: (i32.ge_u <expr> <expr>)
i64.eq: (i64.eq <expr> <expr>)
i64.ne: (i64.ne <expr> <expr>)
i64.lt_s: (i64.lt_s <expr> <expr>)
i64.lt_u: (i64.lt_u <expr> <expr>)
i64.le_s: (i64.le_s <expr> <expr>)
i64.le_u: (i64.le_u <expr> <expr>)
i64.gt_s: (i64.gt_s <expr> <expr>)
i64.gt_u: (i64.gt_u <expr> <expr>)
i64.ge_s: (i64.ge_s <expr> <expr>)
i64.ge_u: (i64.ge_u <expr> <expr>)
f32.eq: (f32.eq <expr> <expr>)
f32.ne: (f32.ne <expr> <expr>)
f32.lt: (f32.lt <expr> <expr>)
f32.le: (f32.le <expr> <expr>)
f32.gt: (f32.gt <expr> <expr>)
f32.ge: (f32.ge <expr> <expr>)
f64.eq: (f64.eq <expr> <expr>)
f64.ne: (f64.ne <expr> <expr>)
f64.lt: (f64.lt <expr> <expr>)
f64.le: (f64.le <expr> <expr>)
f64.gt: (f64.gt <expr> <expr>)
f64.ge: (f64.ge <expr> <expr>)

i32.wrap_i64: (i32.wrap_i64 <expr>)
i32.trunc_s_f32: (i32.trunc_s_f32 <expr>)
i32.trunc_u_f32: (i32.trunc_u_f32 <expr>)
i32.trunc_s_f64: (i32.trunc_s_f64 <expr>)
i32.trunc_u_f64: (i32.trunc_u_f64 <expr>)
i64.extend_s_i32: (i64.extend_s_i32 <expr>)
i64.extend_u_i32: (i64.extend_u_i32 <expr>)
i64.trunc_s_f32: (i64.trunc_s_f32 <expr>)
i64.trunc_u_f32: (i64.trunc_u_f32 <expr>)
i64.trunc_s_f64: (i64.trunc_s_f64 <expr>)
i64.trunc_u_f64: (i64.trunc_u_f64 <expr>)
f32.convert_s_i32: (f32.convert_s_i32 <expr>)
f32.convert_u_i32: (f32.convert_u_i32 <expr>)
f32.convert_s_i64: (f32.convert_s_i64 <expr>)
f32.convert_u_i64: (f32.convert_u_i64 <expr>)
f32.demote_f64: (f32.demote_f64 <expr>)
f64.convert_s_i32: (f64.convert_s_i32 <expr>)
f64.convert_u_i32: (f64.convert_u_i32 <expr>)
f64.convert_s_i64: (f64.convert_s_i64 <expr>)
f64.convert_u_i64: (f64.convert_u_i64 <expr>)
f64.promote_f32: (f64.promote_f32 <expr>)
i32.reinterpret_f32: (i32.reinterpret_f32 <expr>)
i64.reinterpret_f64: (i64.reinterpret_f64 <expr>)
f32.reinterpret_i32: (f32.reinterpret_i32 <expr>)
f64.reinterpret_i64: (f64.reinterpret_i64 <expr>)
